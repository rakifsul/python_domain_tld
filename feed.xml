<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>RAKIFSUL PYTHON</title>
    <link href="https://python.rakifsul.my.id/feed.xml" rel="self" />
    <link href="https://python.rakifsul.my.id" />
    <updated>2023-12-06T22:24:57+07:00</updated>
    <author>
        <name>RAKIFSUL</name>
    </author>
    <id>https://python.rakifsul.my.id</id>

    <entry>
        <title>Belajar Python 3 - Penanganan File</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-penanganan-file.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-penanganan-file.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:22:44+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Penanganan file adalah skill dasar programmer Python 3 yang harus dikuasai. Itu karena, file hampir selalu digunakan di berbagai aplikasi. Mulai dari untuk keperluan konfigurasi hingga hal-hal lainnya. Penanganan file di Python 3 bisa dibilang memiliki sintaks yang sederhana. Kata kuncinya adalah "open", "read",&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Penanganan file adalah skill dasar programmer Python 3 yang harus dikuasai.</p>
<p>Itu karena, file hampir selalu digunakan di berbagai aplikasi.</p>
<p>Mulai dari untuk keperluan konfigurasi hingga hal-hal lainnya.</p>
<p>Penanganan file di Python 3 bisa dibilang memiliki sintaks yang sederhana.</p>
<p>Kata kuncinya adalah "open", "read", "write", dan "close".</p>
<p>Adalah kebiasaan yang baik untuk selalu men-close file setelah di-open.</p>
<p>Sekarang, saya akan membahasnya.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal cara penanganan file di Python 3.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_file".</p>
<p>Caranya sudah dijelaskan di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file "main.py".</p>
<p>Isi "main.py" dengan kode ini:</p>
<pre class="language-python line-numbers"><code># membuka file dengan parameter bawaan, yakni "rt"
print("open default")

file = open("filename.txt")
print(file.read())
file.close()

# membuka file dengan parameter bawaan, yakni "rt" ditulis secara eksplisit
print("")
print("open read, text")

file = open("filename.txt", "rt")
print(file.read())
file.close()

# membuka file dan membaca dalam bentuk binary
print("")
print("open read, binary")

file = open("filename.txt", "rb")
print(file.read())
file.close()

# menambahkan baris tambahan
file = open("filename.txt", "a")
file.write("\nbaris tambahan")
file.close()

print("")
print("ada baris tambahan")

file = open("filename.txt", "rt")
print(file.read())
file.close()

# menimpa isi file
f = open("filename.txt", "w")
f.write("baris pertama\nbaris kedua\nbaris ketiga\nbaris keempat")
f.close()

print("")
print("replace isi file")

file = open("filename.txt", "rt")
print(file.read())
file.close()</code></pre>
<p>Selanjutnya, buatlah file teks bernama "filename.txt" yang isinya:</p>
<pre>baris pertama<br>baris kedua<br>baris ketiga<br>baris keempat</pre>
<p>Sekarang, jalankan:</p>
<pre>python main.py</pre>
<p>Output-nya:</p>
<pre>open default<br>baris pertama<br>baris kedua<br>baris ketiga<br>baris keempat<br><br>open read, text<br>baris pertama<br>baris kedua<br>baris ketiga<br>baris keempat<br><br>open read, binary<br>b'baris pertama\r\nbaris kedua\r\nbaris ketiga\r\nbaris keempat'<br><br>ada baris tambahan<br>baris pertama<br>baris kedua<br>baris ketiga<br>baris keempat<br>baris tambahan<br><br>replace isi file<br>baris pertama<br>baris kedua<br>baris ketiga<br>baris keempat</pre>
<h2>Pembahasan</h2>
<p>Pada bagian ini, kita membaca file dengan parameter default, yakni "rt".</p>
<p>Karena default, maka "rt" tidak harus ditulis:</p>
<pre class="language-python line-numbers"><code># membuka file dengan parameter bawaan, yakni "rt"
print("open default")

file = open("filename.txt")
print(file.read())
file.close()</code></pre>
<p>Bisa juga ditulis "rt" secara eksplisit seperti ini:</p>
<pre class="language-python line-numbers"><code># membuka file dengan parameter bawaan, yakni "rt" ditulis secara eksplisit
print("")
print("open read, text")

file = open("filename.txt", "rt")
print(file.read())
file.close()</code></pre>
<p>Jika ingin membacanya sebagai binary:</p>
<pre class="language-python line-numbers"><code># membuka file dan membaca dalam bentuk binary
print("")
print("open read, binary")

file = open("filename.txt", "rb")
print(file.read())
file.close()</code></pre>
<p>Adapun, jika ingin menambahkan ujungnya:</p>
<pre class="language-python line-numbers"><code># menambahkan baris tambahan
file = open("filename.txt", "a")
file.write("\nbaris tambahan")
file.close()

print("")
print("ada baris tambahan")

file = open("filename.txt", "rt")
print(file.read())
file.close()</code></pre>
<p>Perhatikan bahwa "\n" pada "\nbaris tambahan" adalah karakter newline.</p>
<p>Sekarang, file kita sudah ditambahkan isinya.</p>
<p>Lalu, bagaimana caranya supaya kembali seperti semula? Begini:</p>
<pre class="language-python line-numbers"><code># menimpa isi file
f = open("filename.txt", "w")
f.write("baris pertama\nbaris kedua\nbaris ketiga\nbaris keempat")
f.close()

print("")
print("replace isi file")

file = open("filename.txt", "rt")
print(file.read())
file.close()</code></pre>
<p>Secara lengkap, parameter kedua dari fungsi open bisa kombinasi dari karakter di bawah ini.</p>
<p>Sebelah kiri:</p>
<pre>"r" - Read - nilai bawaan. membuka untuk membaca.<br>"w" - Write - membuka untuk menulis, akan membuat file jika file-nya belum ada.<br>"a" - Append - membuka untuk menambahkan, akan membuat file jika file-nya belum ada.<br>"x" - Create - membuat file, mengembalikan error jika file sudah ada.</pre>
<p>Sebelah kanan:</p>
<pre>"t" - Text - nilai bawaan. untuk mode teks.<br>"b" - Binary - untuk mode binary.</pre>
<h2>Penutup</h2>
<p>Sekarang seharusnya Anda paham dengan apa yang saya jelaskan tadi.</p>
<p>Selanjutnya, pelajari lebih banyak lagi tentang file.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Modul sys</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-modul-sys.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-modul-sys.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:22:49+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Modul sys adalah modul yang berisi variabel dan fungsi yang berkaitan dengan interpreter Python. Tujuan dari tutorial ini adalah: Prasyarat dari tutorial ini adalah: Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_sys". Caranya sudah dijelaskan di tutorial ini. Sekarang,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Modul sys adalah modul yang berisi variabel dan fungsi yang berkaitan dengan interpreter Python.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul sys.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_sys".</p>
<p>Caranya sudah dijelaskan di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Isi main.py dengan kode ini:</p>
<pre class="language-python line-numbers"><code># begin: import module
import sys
# end: import module

# mem-print command line argument
print(sys.argv)

# mem-print versi Python
print(sys.version)

# mem-print versi Python yang lebih detail
print(sys.version_info)

# mem-print path pencarian dari modul
print(sys.path)

countRef = "sesuatu"

# mem-print jumlah referensi variabel "countRef"
print(sys.getrefcount(countRef))

# standard input
for row in sys.stdin: 
	if "quit" == row.lstrip().rstrip(): 
		break
	print("input: ", row) 

print("keluar") 

# keluar aplikasi
sys.exit()

# karena sudah keluar aplikasi, teks di bawah tidak muncul
print("tidak muncul.")</code></pre>
<p>Sekarang, jalankan:</p>
<pre>python main.py</pre>
<p>Output-nya:</p>
<pre>['main.py']<br>3.10.11 (tags/v3.10.11:7d4cc5a, Apr Â 5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]<br>sys.version_info(major=3, minor=10, micro=11, releaselevel='final', serial=0)<br>['D:\\Local\\Produk\\RAKIFSUL\\PYTHON\\Dasar\\NEXT\\paket_project_python3_dasar_next\\project_python3_sys', 'C:\\Install\\Python\\WPy64-310111\\python-3.10.11.amd64\\python310.zip', 'C:\\Install\\Python\\WPy64-310111\\python-3.10.11.amd64\\DLLs', 'C:\\Install\\Python\\WPy64-310111\\python-3.10.11.amd64\\lib', 'C:\\Install\\Python\\WPy64-310111\\python-3.10.11.amd64', 'C:\\Install\\Python\\WPy64-310111\\python-3.10.11.amd64\\lib\\site-packages'] Â <br>4</pre>
<p>Jika di titik ini Anda meng-input-kan karakter, maka karakter tersebut akan di-print.</p>
<p>Jika di titik tadi Anda menulis "quit", maka aplikasi akan keluar.</p>
<h2>Pembahasan</h2>
<p>Pada bagian ini, kita meng-import modul sys:</p>
<pre class="language-python line-numbers"><code># begin: import module
import sys
# end: import module</code></pre>
<p>Pada bagian ini, kita mem-print argumen dari command line:</p>
<pre class="language-python line-numbers"><code># mem-print command line argument
print(sys.argv)</code></pre>
<p>Jika kita menjalankan "python main.py" maka hanya keluar 1 elemen dari array di output-nya, yakni "main.py".</p>
<p>Jika kita menjalankan "python main.py 1 2 3" maka yang keluar adalah array berisi elemen ["main.py", "1", "2", "3"].</p>
<p>Pada bagian ini, kita mem-print versi Python:</p>
<pre class="language-python line-numbers"><code># mem-print versi Python
print(sys.version)</code></pre>
<p>Pada bagian ini, kita mem-print versi Python secara lebih detail:</p>
<pre class="language-python line-numbers"><code># mem-print versi Python yang lebih detail
print(sys.version_info)</code></pre>
<p>Pada bagian ini, kita memprint path pencarian dari modul:</p>
<pre class="language-python line-numbers"><code># mem-print path pencarian dari modul
print(sys.path)</code></pre>
<p>Pada bagian ini, kita mem-print jumlah referensi variabel "countRef":</p>
<pre class="language-python line-numbers"><code>countRef = "sesuatu"

# mem-print jumlah referensi variabel "countRef"
print(sys.getrefcount(countRef))</code></pre>
<p>Tentu bukan hanya variabel yang bernama countRef. Variabel dengan nama lain juga bisa, asalkan disesuaikan dengan parameter dari method sys.getrefcount -nya.</p>
<p>Pada bagian ini, kita menerima input dan mem-print-nya. Jika input adalah "quit" maka keluar dari aplikasi:</p>
<pre class="language-python line-numbers"><code># standard input
for row in sys.stdin:
	if "quit" == row.lstrip().rstrip():
		break
	print("input: ", row)</code></pre>
<p>Pada bagian ini, kita keluar aplikasi secara paksa. Menyebabkan print terbawah tidak keluar output-nya:</p>
<pre class="language-python line-numbers"><code># keluar aplikasi
sys.exit()

# karena sudah keluar aplikasi, teks di bawah tidak muncul
print("tidak muncul.")</code></pre>
<h2>Penutup</h2>
<p>Sekarang seharusnya Anda paham dengan apa yang saya jelaskan tadi.</p>
<p>Sekarang, cobalah buka dokumentasi Python 3 tentang modul sys dan coba method atau variabel yang belum dicontohkan di tutorial ini.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Studi Kasus Python 3 - Membuat Aplikasi Password Generator</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/studi-kasus-python-3-membuat-aplikasi-password-generator.html"/>
        <id>https://python.rakifsul.my.id/studi-kasus-python-3-membuat-aplikasi-password-generator.html</id>
            <category term="Premium"/>

        <updated>2023-12-06T22:22:55+07:00</updated>
            <summary>
                <![CDATA[
                    Password generator adalah aplikasi yang digunakan untuk membuat password. Password yang dibuat oleh password generator mungkin memiliki kombinasi dari berbagai jenis karakter Misalnya, huruf besar, huruf kecil, angka, dan simbol. Ada juga fitur yang memungkinkan untuk membuat password dengan kombinasi yang unik atau tidak berulang.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Password generator adalah aplikasi yang digunakan untuk membuat password.</p>
<p>Password yang dibuat oleh password generator mungkin memiliki kombinasi dari berbagai jenis karakter</p>
<p>Misalnya, huruf besar, huruf kecil, angka, dan simbol.</p>
<p>Ada juga fitur yang memungkinkan untuk membuat password dengan kombinasi yang unik atau tidak berulang.</p>
<p>Pada umumnya, karakter password yang dihasilkan adalah acak.</p>
<p>Password generator idealnya bisa dijalankan dengan cepat.</p>
<p>Oleh karena itu, kurang cocok rasanya jika password generator dibuat menggunakan framework yang berat seperti Electron.</p>
<p>Oleh karena itu, studi kasus ini membahas pembuatan aplikasi password generator dengan Python 3 dan library wxPython.</p>
<p>Bagaimana caranya? Itu akan dibahas dalam studi kasus ini.</p>
<p>Tapi, untuk mengakses studi kasus ini, Anda harus membelinya.</p>
<p>Caranya adalah dengan mengklik tombol di bawah.</p>
<p>Tapi, disclaimer, ya...:</p>
<ul>
<li>Source code hanya teruji di Windows 11 dan tidak dijamin akan berjalan dengan benar.</li>
<li>Source code hanya teruji dengan Python 3.10.x dan tidak dijamin akan berjalan dengan benar.</li>
<li>Saya tidak menjamin bahwa Anda akan paham dengan isi studi kasus ini.</li>
</ul>
<p class="align-center"><a class="btn coba" style="width: 100%;" href="javascript:void(0);" rel="nofollow noopener noreferrer">belum tersedia</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Daftar Beberapa Library GUI untuk Python</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/daftar-beberapa-library-gui-untuk-python.html"/>
        <id>https://python.rakifsul.my.id/daftar-beberapa-library-gui-untuk-python.html</id>
            <category term="Lain-Lain"/>

        <updated>2023-12-06T22:23:00+07:00</updated>
            <summary>
                <![CDATA[
                    Python memiliki beberapa library untuk membuat GUI. Berikut ini adalah daftarnya. Untuk lebih detailnya silakan cari sendiri.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Python memiliki beberapa library untuk membuat GUI.</p>
<p>Berikut ini adalah daftarnya.</p>
<ol>
<li>Tkinter</li>
<li>PyQT</li>
<li>wxPython</li>
<li>Kivy</li>
<li>PySide</li>
<li>PyGTK</li>
<li>PyFLTK</li>
<li>Dear PyGui</li>
<li>Libavg</li>
<li>PySimpleGUI</li>
<li>PyForms</li>
<li>Wax</li>
<li>Eel</li>
</ol>
<p>Untuk lebih detailnya silakan cari sendiri.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Modul threading</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-modul-threading.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-modul-threading.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:23:14+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Pada penerapannya, seringkali terjadi bahwa aplikasi desktop harus mengerjakan lebih dari satu task secara bersamaan. Sebagai contoh, dalam aplikasi text editor, sistem harus mengecek spelling error sementara user tetap mengetik. Python 3 memilik solusi untuk ini selain modul _thread yang telah dijelaskan di tutorial&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Pada penerapannya, seringkali terjadi bahwa aplikasi desktop harus mengerjakan lebih dari satu task secara bersamaan.</p>
<p>Sebagai contoh, dalam aplikasi text editor, sistem harus mengecek spelling error sementara user tetap mengetik.</p>
<p>Python 3 memilik solusi untuk ini selain modul _thread yang telah dijelaskan <a href="https://python.rakifsul.my.id/belajar-python-3-modul-_thread.html">di tutorial ini</a>, yakni dengan modul threading.</p>
<p>Bagaimana cara penggunaannya, mari simak...</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul threading dan dapat menggunakannya sesuai contoh yang diberikan.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_threading".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

# begin: import modules
import threading
import time
# end: import modules

# buat class PenampungThreading
# kali ini kita meng-extend nya dari threading.Thread
class PenampungThreading(threading.Thread):
    # class constructor
    # inputnya: nama, jeda, dan berapa kali counter berjalan
    def __init__(self, nama, jeda, berapa_kali):
        # panggil constructor parent class: threading.Thread
        threading.Thread.__init__(self)
        # assign nama
        self.nama = nama
        # assign jeda
        self.jeda = jeda
        # assign berapa kali
        self.berapa_kali = berapa_kali

    # override method dari threading.Thread
    def run(self):
        # memprint "Thread Dimulai: namanya"
        print ("Thread Dimulai: " + self.nama)

        # selama berapa_kali lebih besar dari nol
        while self.berapa_kali:
            # terapkan jeda sebesar jeda
            time.sleep(self.jeda)
            # print nama dan berapa kali yang sedang berjalan
            print(self.nama, ":", str(self.berapa_kali))
            # kurangi berapa_kali dengan 1
            self.berapa_kali -= 1
        # setelah keluar dari while
        print ("Thread Selesai: " + self.nama)

# begin: membuat objek PenampungThread
th1 = PenampungThreading("Thread-1", 2, 5)
th2 = PenampungThreading("Thread-2", 1, 6)
# end: membuat objek PenampungThread

# begin: mulai thread
th1.start()
th2.start()
# end: mulai thread

# join di sini, tujuannya adalah agar main thread
# atau blok utama dari kode menunggu masing-masing thread selesai
th1.join()
th2.join()

# sekarang kedua thread sudah selesai, ayo keluar dari program.
print ("Keluar dari Main Thread....")

# catatan: Anda boleh coba disable kedua join di atas
# dan lihat efeknya</code></pre>
<p>Selanjutnya, jalankan:</p>
<pre>python main.py</pre>
<p>Nanti akan muncul output semacam ini:</p>
<pre>Thread Dimulai: Thread-1<br>Thread Dimulai: Thread-2<br>Thread-2 : 6<br>Thread-1 : 5<br>Thread-2 : 5<br>Thread-2 : 4<br>Thread-1 : 4<br>Thread-2 : 3<br>Thread-2 : 2<br>Thread-1 : 3<br>Thread-2 : 1<br>Thread Selesai: Thread-2<br>Thread-1 : 2<br>Thread-1 : 1<br>Thread Selesai: Thread-1<br>Keluar dari Main Thread....</pre>
<p>Output tersebut akan terus berjalan hingga selesai dengan sendirinya<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">.</span></p>
<p>Setelah berhenti, kita bisa membaca dari output bahwa Thread-1 dan Thread-2 berjalan bersamaan berdasarkan angka yang muncul.</p>
<p>Terlihat bahwa Thread-2 lebih cepat karena selesai lebih dulu.</p>
<h2>Pembahasan</h2>
<p>Aplikasi ini bermula dari meng-import modul-modul ini:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import threading
import time
# end: import modules</code></pre>
<p>Modul threading untuk threading dan modul time untuk menerapkan jeda.</p>
<p>Selanjutnya, kita membuat class PenampungThreading yang diturunkan dari threading.Thread untuk membungkus task yang akan di-threading-kan:</p>
<pre class="language-python line-numbers"><code># buat class PenampungThreading
# kali ini kita meng-extend nya dari threading.Thread
class PenampungThreading(threading.Thread):</code></pre>
<p>Pada constructor-nya, kita memberi nama thread, jeda, dan berapa kali hitungan task-nya akan berjalan:</p>
<pre class="language-python line-numbers"><code>    # class constructor
    # inputnya: nama, jeda, dan berapa kali counter berjalan
    def __init__(self, nama, jeda, berapa_kali):
        # panggil constructor parent class: threading.Thread
        threading.Thread.__init__(self)
        # assign nama
        self.nama = nama
        # assign jeda
        self.jeda = jeda
        # assign berapa kali
        self.berapa_kali = berapa_kali</code></pre>
<p>Dan ini adalah tugasnya saat threading berjalan:</p>
<pre class="language-python line-numbers"><code>    # override method dari threading.Thread
    def run(self):
        # memprint "Thread Dimulai: namanya"
        print ("Thread Dimulai: " + self.nama)

        # selama berapa_kali lebih besar dari nol
        while self.berapa_kali:
            # terapkan jeda sebesar jeda
            time.sleep(self.jeda)
            # print nama dan berapa kali yang sedang berjalan
            print(self.nama, ":", str(self.berapa_kali))
            # kurangi berapa_kali dengan 1
            self.berapa_kali -= 1
        # setelah keluar dari while
        print ("Thread Selesai: " + self.nama)</code></pre>
<p>while self.berapa_kali artinya loop ini akan berjalan selama variabel berapa_kali belum mencapai nol. Ingat bahwa nilai berapa_kali dikurangi satu setiap loop.</p>
<p>class berakhir di situ, sekarang di scope baru, kita membuat objek penampung threading dan menjalankan keduanya bersamaan:</p>
<pre class="language-python line-numbers"><code># begin: membuat objek PenampungThreading
th1 = PenampungThreading("Thread-1", 2, 5)
th2 = PenampungThreading("Thread-2", 1, 6)
# end: membuat objek PenampungThreading

# begin: mulai thread
th1.start()
th2.start()
# end: mulai thread

# join di sini, tujuannya adalah agar main thread
# atau blok utama dari kode menunggu masing-masing thread selesai
th1.join()
th2.join()

# sekarang kedua thread sudah selesai, ayo keluar dari program.
print ("Keluar dari Main Thread....")

# catatan: Anda boleh coba disable kedua join di atas
# dan lihat efeknya</code></pre>
<p>Karena join fungsinya analog dengan while 1 <a href="https://python.rakifsul.my.id/belajar-python-3-modul-_thread.html">di pembahasan modul _thread</a>, maka kita tidak perlu menambahkan while 1 lagi di bagian terbawah script.</p>
<p>Sebagai pembanding, coba comment-kan kedua join di atas.</p>
<h2>Penutup</h2>
<p>Sekarang seharusnya Anda telah memahami cara threading dengan modul threading.</p>
<p>Selanjutnya terserah Anda...</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Modul _thread</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-modul-_thread.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-modul-_thread.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:23:25+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Pada penerapannya, seringkali terjadi bahwa aplikasi desktop harus mengerjakan lebih dari satu task secara bersamaan. Sebagai contoh, dalam aplikasi text editor, sistem harus mengecek spelling error sementara user tetap mengetik. Python 3 memilik solusi untuk ini, yakni dengan modul _thread. Bagaimana cara penggunaannya, mari&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Pada penerapannya, seringkali terjadi bahwa aplikasi desktop harus mengerjakan lebih dari satu task secara bersamaan.</p>
<p>Sebagai contoh, dalam aplikasi text editor, sistem harus mengecek spelling error sementara user tetap mengetik.</p>
<p>Python 3 memilik solusi untuk ini, yakni dengan modul _thread.</p>
<p>Bagaimana cara penggunaannya, mari simak...</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul _thread dan dapat menggunakannya sesuai contoh yang diberikan.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_thread".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

# begin: import modules
import _thread
import time
# end: import modules

# buat class PenampungThread
# walaupun kita tidak sedang menggunakan modul threading.Thread, ini juga bisa
class PenampungThread:

    # class constructor dengan input nama thread
    def __init__(self, nama_thread):
        # assign nama
        self.nama = nama_thread

    # method ini dijalankan dengan thread
    # jeda adalah waktu jedanya
    def run(self, jeda):
        # counter
        ctr = 0

        # sampai selama mungkin
        while 1:
            # terapkan jeda sebesar jeda
            time.sleep(jeda)
            # print nama thread dan counter nya
            print(self.nama, ":", str(ctr))
            # naikkan counter
            ctr+=1

# begin: membuat objek PenampungThread
th1 = PenampungThread("thread-a")
th2 = PenampungThread("thread-b")
# end: membuat objek PenampungThread

try:
      # begin: mulai thread
      _thread.start_new_thread(th1.run, (2,))
      _thread.start_new_thread(th2.run, (4,))
      # end: mulai thread
except:
      # kalau thread tidak bisa dijalankan
      print ("Error: tidak bisa memulai thread")

# mencegah program keluar sebelum thread berjalan
while 1:
      pass</code></pre>
<p>Selanjutnya, jalankan:</p>
<pre>python main.py</pre>
<p>Nanti akan muncul output semacam ini:</p>
<pre>thread-a : 0<br>thread-b : 0<br>thread-a : 1<br>thread-a : 2<br>thread-b : 1<br>thread-a : 3<br>thread-a : 4<br>thread-b : 2<br>thread-a : 5<br>thread-a : 6<br>thread-b : 3<br>thread-a : 7<br>thread-a : 8<br>thread-b : 4<br>thread-a : 9<br>thread-a : 10<br>thread-b : 5<br>thread-a : 11<br>thread-a : 12<br>thread-b : 6<br>thread-a : 13</pre>
<p>Output tersebut akan terus berjalan hingga kita menekan control + c.</p>
<p>Jadi tekan key tersebut untuk menghentikannya.</p>
<p>Setelah berhenti, kita bisa membaca dari output bahwa thread-a dan thread-b berjalan bersamaan berdasarkan angka yang muncul.</p>
<p>Terlihat bahwa thread-a lebih cepat karena angkanya naik lebih dulu daripada thread-b.</p>
<h2>Pembahasan</h2>
<p>Aplikasi ini bermula dari meng-import modul-modul ini:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import _thread
import time
# end: import modules</code></pre>
<p>Modul _thread untuk threading dan modul time untuk menerapkan jeda.</p>
<p>Selanjutnya, kita membuat class PenampungThread untuk membungkus task yang akan di-threading-kan:</p>
<pre class="language-python line-numbers"><code># buat class PenampungThread
# walaupun kita tidak sedang menggunakan modul threading.Thread, ini juga bisa
class PenampungThread:</code></pre>
<p>Pada constructor-nya, kita memberi nama pada thread tersebut:</p>
<pre class="language-python line-numbers"><code># class constructor dengan input nama thread
    def __init__(self, nama_thread):
        # assign nama
        self.nama = nama_thread</code></pre>
<p>Dan ini adalah tugasnya saat threading berjalan:</p>
<pre class="language-python line-numbers"><code># method ini dijalankan dengan thread
    # jeda adalah waktu jedanya
    def run(self, jeda):
        # counter
        ctr = 0

        # sampai selama mungkin
        while 1:
            # terapkan jeda sebesar jeda
            time.sleep(jeda)
            # print nama thread dan counter nya
            print(self.nama, ":", str(ctr))
            # naikkan counter
            ctr+=1</code></pre>
<p>while 1 artinya loop ini akan berjalan selama aplikasi belum dihentikan.</p>
<p>class berakhir di situ, sekarang di scope baru, kita membuat objek penampung thread dan menjalankan keduanya bersamaan:</p>
<pre class="language-python line-numbers"><code># begin: membuat objek PenampungThread
th1 = PenampungThread("thread-a")
th2 = PenampungThread("thread-b")
# end: membuat objek PenampungThread

try:
      # begin: mulai thread
      _thread.start_new_thread(th1.run, (2,))
      _thread.start_new_thread(th2.run, (4,))
      # end: mulai thread
except:
      # kalau thread tidak bisa dijalankan
      print ("Error: tidak bisa memulai thread")</code></pre>
<p>Terakhir, kita harus cegah aplikasi dihentikan secara otomatis:</p>
<pre class="language-python line-numbers"><code># mencegah program keluar sebelum thread berjalan
while 1:
      pass</code></pre>
<h2>Penutup</h2>
<p>Sekarang seharusnya Anda telah memahami cara threading dengan modul _thread.</p>
<p>Selanjutnya terserah Anda...</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Modul Sendiri</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-modul-sendiri.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-modul-sendiri.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:23:38+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Modul sendiri di sini artinya adalah modul yang ditulis oleh programmer yang menggunakannya. Modul sendiri bermanfaat untuk memecah kode Python yang banyak menjadi bagian-bagian kecil. Itu sangat membantu jika kita sedang mengembangkan aplikasi yang besar. Tujuan dari tutorial ini adalah: Prasyarat dari tutorial ini&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Modul sendiri di sini artinya adalah modul yang ditulis oleh programmer yang menggunakannya.</p>
<p>Modul sendiri bermanfaat untuk memecah kode Python yang banyak menjadi bagian-bagian kecil.</p>
<p>Itu sangat membantu jika kita sedang mengembangkan aplikasi yang besar.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal dan membuat modul sendiri.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_modul_sendiri".</p>
<p>Caranya sudah dijelaskan di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Rename file tersebut menjadi "contoh_modul_sendiri.py"</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: contoh_modul_sendiri.py

# buat fungsi untuk memprint "modul yang bagus"
def nama_modul_saya():
    print("modul yang bagus")

# jika ini program utama
if __name__ == "__main__":
    # jalankan fungsi nama_modul_saya()
    # coba anda jalankan langsung:
    # python contoh_modul_sendiri.py
    nama_modul_saya()</code></pre>
<p>Selanjutnya, buat file baru bernama "pengguna_modul_sendiri.py".</p>
<p>Isi file tersebut dengan kode ini:</p>
<pre class="language-python line-numbers"><code># file: pengguna_modul_sendiri.py

# import modul sendiri: contoh_modul_sendiri
# kemudian ambil fungsi nama_modul_saya
from contoh_modul_sendiri import nama_modul_saya

# jalankan fungsi nama_modul_saya
# maka hanya ada satu baris teks,
# karena eksekusi kode di bagian terbawah script contoh_modul_sendiri.py
# terproteksi oleh:
# if __name__ == "__main__":
# pada script contoh_modul_sendiri.py
nama_modul_saya()</code></pre>
<p>Sekarang, jalankan:</p>
<pre>python pengguna_modul_sendiri.py</pre>
<p>Output-nya:</p>
<pre>modul yang bagus</pre>
<p>Sekarang, jalankan:</p>
<pre>python contoh_modul_sendiri.py</pre>
<p>Output-nya:</p>
<pre>modul yang bagus</pre>
<h2>Pembahasan</h2>
<p>Aplikasi ini dimulai dari pembuatan modul sendiri.</p>
<p>Di modul sendiri tersebut, yang nama file-nya "contoh_modul_sendiri.py", dibuat sebuah fungsi untuk mem-print teks:</p>
<pre class="language-python line-numbers"><code># buat fungsi untuk memprint "modul yang bagus"
def nama_modul_saya():
    print("modul yang bagus")</code></pre>
<p>Sementara itu, fungsi itu dipanggil dari file "pengguna_modul_sendiri.py", tapi import dulu modul tersebut:</p>
<pre class="language-python line-numbers"><code># import modul sendiri: contoh_modul_sendiri
# kemudian ambil fungsi nama_modul_saya
from contoh_modul_sendiri import nama_modul_saya</code></pre>
<p>Setelah diimport, lalu dipanggil:</p>
<pre class="language-python line-numbers"><code>nama_modul_saya()</code></pre>
<p>Tentu output "modul yang bagus" keluar di console.</p>
<p>Akan tetapi, jika kita perhatikan di bagian bawah file "contoh_modul_sendiri.py", ada pemanggilan fungsi itu juga:</p>
<pre class="language-python line-numbers"><code># jika ini program utama
if __name__ == "__main__":
    # jalankan fungsi nama_modul_saya()
    # coba anda jalankan langsung:
    # python contoh_modul_sendiri.py
    nama_modul_saya()</code></pre>
<p>Lalu, kenapa outputnya cuma satu?</p>
<p>Ternyata jawabannya ada di if __name__ == "__main__".</p>
<p>__name__ akan menjadi "__main__" jika kita menjalankan kode dari file "contoh_modul_sendiri.py" secara langsung. Seperti ini:</p>
<pre>python contoh_modul_sendiri.py</pre>
<p>Namun jika tidak begitu maka __name__ pastinya bukan "__main__".</p>
<p>Akibatnya nama_modul_saya() di bagian bawah "contoh_modul_sendiri.py" tidak dijalankan.</p>
<h2>Penutup</h2>
<p>Sekarang seharusnya Anda paham dengan apa yang saya jelaskan tadi.</p>
<p>Sekarang, cobalah membuah beberapa fungsi tambahan pada modul sendiri Anda dan coba panggil dari "pengguna_modul_sendiri.py".</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Menulis CSV</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-menulis-csv.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-menulis-csv.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:23:50+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan CSV adalah comma separated values yang formatnya berbentuk tabel. Untuk mengolahnya di Python 3, digunakan modul csv. Kali ini kita akan menggunakan modul csv untuk menulis csv. Modul csv yang akan kita gunakan nanti adalah csv.writer dan csv.DictWriter. Seperti halnya yang read, csv.writer menggunakan&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>CSV adalah comma separated values yang formatnya berbentuk tabel.</p>
<p>Untuk mengolahnya di Python 3, digunakan modul csv.</p>
<p>Kali ini kita akan menggunakan modul csv untuk menulis csv.</p>
<p>Modul csv yang akan kita gunakan nanti adalah csv.writer dan csv.DictWriter.</p>
<p>Seperti halnya yang read, csv.writer menggunakan array dan csv.DictWriter menggunakan dictionary.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul csv.writer dan csv.DictWriter di Python 3.</li>
<li>Pembaca dapat menggunakan modul csv untuk menulis isi file csv.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_csv_write".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

import csv

# cara pertama
# buka contoh-write-0.csv untuk ditulis
with open('contoh-write-0.csv', mode='w') as csvf:
    # gunakan csv.writer
    # quotechar di-set untuk double quote : '"'
    # csv.QUOTE_MINIMAL: hanya quote yang memiliki special character seperti delimiter (misal: koma), quotechar.
    csvw = csv.writer(csvf, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    # tulis row
    csvw.writerow(['id', 'active', 'ip_address'])
    csvw.writerow(['1', 'True', '127.0.0.1'])

#cara kedua
with open('contoh-write-1.csv', mode='w') as csvf:
    # kali ini nama kolom dibuat terlebih dahulu
    namaKolom = ['id', 'active', 'ip_address']

    # gunakan dictionary writer (map writer)
    # nama kolom digunakan di sini
    csvw = csv.DictWriter(csvf, fieldnames=namaKolom)
    # nama kolom ditulis di sini
    csvw.writeheader()
    # tulis row
    csvw.writerow({'id': '1', 'active' : 'False', 'ip_address' : '192.168.0.1'})</code></pre>
<p>Selanjutnya, jalankan:</p>
<pre>python main.py</pre>
<p>Nanti akan ada 2 file csv muncul di folder project.</p>
<p>File "contoh-write-0.csv" menggunakan csv.writer.</p>
<p>File "contoh-write-1.csv" menggunakan csv.DictWriter.</p>
<h2>Pembahasan</h2>
<p>Kita memulai aplikasi ini dengan mengimpor modul csv:</p>
<pre class="language-python line-numbers"><code>import csv</code></pre>
<p>Selanjutnya, kita menulis file .csv dengan csv.writer:</p>
<pre class="language-python line-numbers"><code># cara pertama
# buka contoh-write-0.csv untuk ditulis
with open('contoh-write-0.csv', mode='w') as csvf:
    # gunakan csv.writer
    # quotechar di-set untuk double quote : '"'
    # csv.QUOTE_MINIMAL: hanya quote yang memiliki special character seperti delimiter (misal: koma), quotechar.
    csvw = csv.writer(csvf, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    # tulis row
    csvw.writerow(['id', 'active', 'ip_address'])
    csvw.writerow(['1', 'True', '127.0.0.1'])</code></pre>
<p>Yang hasilnya adalah "contoh-write-0.csv".</p>
<p>Sekarang, giliran csv.DictWriter:</p>
<pre class="language-python line-numbers"><code>#cara kedua
with open('contoh-write-1.csv', mode='w') as csvf:
    # kali ini nama kolom dibuat terlebih dahulu
    namaKolom = ['id', 'active', 'ip_address']

    # gunakan dictionary writer (map writer)
    # nama kolom digunakan di sini
    csvw = csv.DictWriter(csvf, fieldnames=namaKolom)
    # nama kolom ditulis di sini
    csvw.writeheader()
    # tulis row
    csvw.writerow({'id': '1', 'active' : 'False', 'ip_address' : '192.168.0.1'})</code></pre>
<p>Perhatikan kedua blok kode sebelumnya.</p>
<p>Di csv.writer, inputnya adalah array dan tidak ada writeHeader sehingga untuk menulis headernya digunakan writeRow.</p>
<p>Di csv.DictWriter, inputnya adalah dictionary dan ada writeHeader.</p>
<h2>Penutup</h2>
<p>Sekarang, seharusnya Anda sudah memahami modul csv.writer dan csv.DictWriter di Python 3.</p>
<p>Selanjutnya, silakan coba sendiri.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Membaca CSV</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-membaca-csv.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-membaca-csv.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:02+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan CSV adalah comma separated values yang formatnya berbentuk tabel. Untuk mengolahnya di Python 3, digunakan modul csv. Kali ini kita akan menggunakan modul csv untuk membaca csv. Modul csv yang akan kita gunakan nanti adalah csv.reader dan csv.DictReader. Perbedaannya, csv.reader menghasilkan array dengan index,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>CSV adalah comma separated values yang formatnya berbentuk tabel.</p>
<p>Untuk mengolahnya di Python 3, digunakan modul csv.</p>
<p>Kali ini kita akan menggunakan modul csv untuk membaca csv.</p>
<p>Modul csv yang akan kita gunakan nanti adalah csv.reader dan csv.DictReader.</p>
<p>Perbedaannya, csv.reader menghasilkan array dengan index, sedangkan csv.DictReader menghasilkan dictionary.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul csv.reader dan csv.DictReader di Python 3.</li>
<li>Pembaca dapat menggunakan modul csv untuk membaca isi file csv.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_csv_read".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

# begin: import modules
import csv
# end: import modules

# print judul
print("// dengan csv.reader")

# buka file contoh-read.csv
# dengan menggunakan with, tidak perlu fungsi close
# dengan menggunakan with, tidak perlu menerapkan exception handling
with open('contoh-read.csv') as csvf:
    # gunakan csv.reader untuk memparsing csv
    csvreader = csv.reader(csvf, delimiter=',')

    # counter
    ctr = 0

    # print row nya
    for baris in csvreader:
        print("id: " + baris[0] + ", active: " + baris[1] + ", IP: " + baris[2])
        ctr += 1

    # print total barisnya
    print("Total baris:" + str(ctr))

# beri jarak
print("")

# print judul
print("// dengan csv.DictReader")


# buka file contoh-read.csv
with open('contoh-read.csv') as csvf:
    # gunakan csv.DictReader untuk memparsing csv
    # dengan csv.DictReader, baris akan menjadi Dictionary
    csvreader = csv.DictReader(csvf, delimiter=',')

    # counter
    ctr = 0

    # print row nya
    for baris in csvreader:
        print("id: " + baris["id"] + ", active: " + baris["active"] + ", IP: " + baris["ip_address"])
        ctr += 1

    # print total barisnya
    print("Total baris:" + str(ctr))</code></pre>
<p>Sekarang, siapkan sebuah file csv semacam ini:</p>
<table style="border-collapse: collapse; width: 100%; height: 151.078px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 33.2843%; height: 50.3594px;">id</td>
<td style="width: 33.2843%; height: 50.3594px;">active</td>
<td style="width: 33.2889%; height: 50.3594px;">ip_address</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2843%; height: 50.3594px;">1</td>
<td style="width: 33.2843%; height: 50.3594px;">True</td>
<td style="width: 33.2889%; height: 50.3594px;">40.152.231.57</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2843%; height: 50.3594px;">2</td>
<td style="width: 33.2843%; height: 50.3594px;">False</td>
<td style="width: 33.2889%; height: 50.3594px;">238.18.84.155</td>
</tr>
</tbody>
</table>
<p>Simpan ke dalam file bernama "contoh-read.csv".</p>
<p>Selanjutnya jalankan:</p>
<pre>python main.py</pre>
<p>Nanti muncul output semacam ini:</p>
<pre>// dengan csv.reader<br>id: id, active: active, IP: ip_address<br>id: 1, active: True, IP: 40.152.231.57<br>id: 2, active: False, IP: 238.18.84.155</pre>
<h2>Pembahasan</h2>
<p>Kita memulai aplikasi ini dengan mengimpor modul csv:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import csv
# end: import modules</code></pre>
<p>Selanjutnya, print judul:</p>
<pre class="language-python line-numbers"><code># print judul
print("// dengan csv.reader")</code></pre>
<p>Selanjutnya, buka dan baca csv-nya:</p>
<pre class="language-python line-numbers"><code># buka file contoh-read.csv
# dengan menggunakan with, tidak perlu fungsi close
# dengan menggunakan with, tidak perlu menerapkan exception handling
with open('contoh-read.csv') as csvf:
    # gunakan csv.reader untuk memparsing csv
    csvreader = csv.reader(csvf, delimiter=',')

    # counter
    ctr = 0

    # print row nya
    for baris in csvreader:
        print("id: " + baris[0] + ", active: " + baris[1] + ", IP: " + baris[2])
        ctr += 1

    # print total barisnya
    print("Total baris:" + str(ctr))</code></pre>
<p>Parameter "delimiter" pada csv.reader adalah pemisahnya, dalam hal ini koma (,).</p>
<p>Perhatikan juga bahwa kita membacanya dari array yang menggunakan index dan karena itulah kurung siku diisi angka:</p>
<pre class="language-python line-numbers"><code># print row nya
    for baris in csvreader:
        print("id: " + baris[0] + ", active: " + baris[1] + ", IP: " + baris[2])</code></pre>
<p>Selanjutnya, saya akan membahas csv.DictReader.</p>
<p>Pada kode ini, kita beri newline kosong dan print judul agar perbedaannya lebih jelas di output:</p>
<pre class="language-python line-numbers"><code># beri jarak
print("")

# print judul
print("// dengan csv.DictReader")</code></pre>
<p>Kemudian, buka dan baca csv-nya:</p>
<pre class="language-python line-numbers"><code># buka file contoh-read.csv
with open('contoh-read.csv') as csvf:
    # gunakan csv.DictReader untuk memparsing csv
    # dengan csv.DictReader, baris akan menjadi Dictionary
    csvreader = csv.DictReader(csvf, delimiter=',')

    # counter
    ctr = 0

    # print row nya
    for baris in csvreader:
        print("id: " + baris["id"] + ", active: " + baris["active"] + ", IP: " + baris["ip_address"])
        ctr += 1

    # print total barisnya
    print("Total baris:" + str(ctr))</code></pre>
<p>Perhatikan bahwa kali ini dictionary digunakan dan karena itulah kurung siku diisi string:</p>
<pre class="language-python line-numbers"><code># print row nya
    for baris in csvreader:
        print("id: " + baris["id"] + ", active: " + baris["active"] + ", IP: " + baris["ip_address"])</code></pre>
<h2>Penutup</h2>
<p>Sekarang, seharusnya Anda sudah memahami modul csv.reader dan csv.DictReader di Python 3.</p>
<p>Silakan eksplorasi lebih lanjut.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Mengenal Package pipreqs</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-mengenal-package-pipreqs.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-mengenal-package-pipreqs.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:09+07:00</updated>
            <summary>
                <![CDATA[
                    Di Python 3, pipreqs adalah package yang berguna untuk membuat requirements.txt dalam scope project. Artinya, berbeda dengan pip freeze yang juga memasukkan daftar modul Python yang tidak digunakan dalam project secara langsung. Untuk menginstall pipreqs: pip install pipreqs Untuk membuat requirements.txt, masuk ke dalam folder&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Di Python 3, pipreqs adalah package yang berguna untuk membuat requirements.txt dalam scope project.</p>
<p>Artinya, berbeda dengan pip freeze yang juga memasukkan daftar modul Python yang tidak digunakan dalam project secara langsung.</p>
<p>Untuk menginstall pipreqs:</p>
<pre>pip install pipreqs</pre>
<p>Untuk membuat requirements.txt, masuk ke dalam folder project kemudian (perhatikan ada tanda titik di sebelah pipreqs. Itu maksudnya adalah folder Anda saat ini):</p>
<pre>pipreqs .</pre>
<p>Nanti requirements akan dimasukkan ke requirements.txt.</p>
<p>Selanjutnya, saat project akan dikerjakan di komputer lain, Anda tinggal masuk ke dalam folder di mana ada requirements.txt dan jalankan perintah:</p>
<pre>pip install -r requirements.txt</pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - json Module</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-json-module.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-json-module.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:22+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan JSON adalah suatu format data yang saat ini banyak digunakan dalam web service. Biasanya saat melakukan suatu request ke web service responnya berupa JSON. Python bisa melakukan konversi dari atau ke JSON. Maksudnya, Python bisa mengonversi data JSON ke key-value pair-nya Python (dictionary) atau&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>JSON adalah suatu format data yang saat ini banyak digunakan dalam web service.</p>
<p>Biasanya saat melakukan suatu request ke web service responnya berupa JSON.</p>
<p>Python bisa melakukan konversi dari atau ke JSON.</p>
<p>Maksudnya, Python bisa mengonversi data JSON ke key-value pair-nya Python (dictionary) atau sebaliknya.</p>
<p>Kali ini, saya akan membahas kedua fungsi tadi.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul json di Python 3.</li>
<li>Pembaca dapat mengonversi JSON ke dictionary Python dan sebaliknya.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_json".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

# begin: import modules
import json
# end: import modules

# memprint teks "json ke python"
print("// json ke python")

# data dalam format json
data_json = '{"nama" : "toko buku", "produk":"buku", "jumlahProduk" : "3"}'

# data barusan dikonversi ke dictionary python
data_di_python = json.loads(data_json)

# print semuanya
print(data_di_python)

# print nama
print(data_di_python["nama"])

# print jumlahProduk
print(data_di_python["jumlahProduk"])

# memprint teks "python ke json"
print("// python ke json")

# data dalam dictionary python
data_python = {
  "nama": "suatu_aplikasi",
  "kode_versi": 40,
  "portable": True,
  "requirement": ("opencv","numpy")
}

# data barusan dikonversi menjadi json
data_di_json = json.dumps(data_python)

# mem-print hasilnya
print(data_di_json)</code></pre>
<p>Selanjutnya, jalankan script tadi dengan perintah:</p>
<pre>python main.py</pre>
<p>Nanti outputnya akan seperti ini:</p>
<pre>// json ke python<br>{'nama': 'toko buku', 'produk': 'buku', 'jumlahProduk': '3'}<br>toko buku<br>3<br>// python ke json<br>{"nama": "suatu_aplikasi", "kode_versi": 40, "portable": true, "requirement": ["opencv", "numpy"]}</pre>
<h2>Pembahasan</h2>
<p>Script tadi dimulai dari mengimpor modul json:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import json
# end: import modules</code></pre>
<p>Kemudian mem-print judul bagian output:</p>
<pre class="language-python line-numbers"><code># memprint teks "json ke python"
print("// json ke python")</code></pre>
<p>Itu penanda agar output nantinya lebih jelas.</p>
<p>Kemudian, kita membuat string JSON dan memasukkannya ke variabel "data_json":</p>
<pre class="language-python line-numbers"><code># data dalam format json
data_json = '{"nama" : "toko buku", "produk":"buku", "jumlahProduk" : "3"}'</code></pre>
<p>Kemudian, kita mengonversinya ke dictionary Python:</p>
<pre class="language-python line-numbers"><code># data barusan dikonversi ke dictionary python
data_di_python = json.loads(data_json)</code></pre>
<p>Kemudian kita mem-print data tadi:</p>
<pre class="language-python line-numbers"><code># print semuanya
print(data_di_python)

# print nama
print(data_di_python["nama"])

# print jumlahProduk
print(data_di_python["jumlahProduk"])</code></pre>
<p>Sekarang kita melakukan sebaliknya, dari Python ke JSON.</p>
<p>Namun, print dulu judulnya:</p>
<pre class="language-python line-numbers"><code># memprint teks "python ke json"
print("// python ke json")</code></pre>
<p>Selanjutnya, definisikan data JSON dalam bentuk dictionary:</p>
<pre class="language-python line-numbers"><code># data dalam dictionary python
data_python = {
  "nama": "suatu_aplikasi",
  "kode_versi": 40,
  "portable": True,
  "requirement": ("opencv","numpy")
}</code></pre>
<p>Kemudian konversi:</p>
<pre class="language-python line-numbers"><code># data barusan dikonversi menjadi json
data_di_json = json.dumps(data_python)</code></pre>
<p>Kemudian print:</p>
<pre class="language-python line-numbers"><code># mem-print hasilnya
print(data_di_json)</code></pre>
<h2>Penutup</h2>
<p>Sekarang, seharusnya Anda sudah memahami modul json di Python 3.</p>
<p>Selanjutnya, sebaiknya Anda mencoba mengonsumsi REST API gratisan dan gunakan method yang telah diajarkan tadi sebagai latihan.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - os Module</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-os-module.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-os-module.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:33+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan os module atau modul os di Python 3 berperan dalam mendapatkan info seputar operating system. Mulai dari mem-print current working directory hingga me-rename file. Modul os merupakan modul bawaan dari Python 3 sehingga tidak diperlukan penginstalan package tambahan. Modul os kemungkinan akan sangat terasa&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>os module atau modul os di Python 3 berperan dalam mendapatkan info seputar operating system.</p>
<p>Mulai dari mem-print current working directory hingga me-rename file.</p>
<p>Modul os merupakan modul bawaan dari Python 3 sehingga tidak diperlukan penginstalan package tambahan.</p>
<p>Modul os kemungkinan akan sangat terasa manfaatnya ketika kita sedang membangun aplikasi desktop.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mengenal modul os dan dapat menggunakannya sesuai contoh yang diberikan.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_os_module".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: main.py

# begin: import modules
import os
# end: import modules

# memprint nama OS
print("os name: ", os.name)

# memprint current working directory
print("current working directory: ", os.getcwd())

# memprint absolute path dari directory saat ini
print("absolute path: ", os.path.abspath('.'))

# melisting files dan sub-directory di directory saat ini
print("list directory: ", os.listdir('.'))

# me-rename file
if os.path.isfile("sample.txt") :
    os.rename("sample.txt","renamed.txt")
elif os.path.isfile("renamed.txt") :
    os.rename("renamed.txt","sample.txt")</code></pre>
<p>Selanjutnya, buatlah sebuah file teks bernama "sample.txt" yang tidak harus ada isinya.</p>
<p>Sekarang, jalankan script itu dengan perintah:</p>
<pre>python main.py</pre>
<p>Nanti akan tampil output:</p>
<pre>os name: Â nt<br>current working directory: Â D:\Local\Produk\RAKIFSUL\PYTHON\project_python3_os_module<br>absolute path: Â D:\Local\Produk\RAKIFSUL\PYTHON\project_python3_os_module<br>list directory: Â ['main.py', 'renamed.txt']</pre>
<p>Hasilnya bisa beda di komputer Anda.</p>
<p>Dan jika Anda perhatikan folder project ini, sample.txt berubah menjadi renamed.txt atau sebaliknya.</p>
<h2>Pembahasan</h2>
<p>Kode project tutorial ini dimulai dari mengimpor modul os:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import os
# end: import modules</code></pre>
<p>Kemudian mem-print nama os:</p>
<pre class="language-python line-numbers"><code># memprint nama OS
print("os name: ", os.name)</code></pre>
<p>Kemudian mem-print current working directory:</p>
<pre class="language-python line-numbers"><code># memprint current working directory
print("current working directory: ", os.getcwd())</code></pre>
<p>Kemudian mem-print absolute path dari directory saat ini:</p>
<pre class="language-apacheconf line-numbers"><code># memprint absolute path dari directory saat ini
print("absolute path: ", os.path.abspath('.'))</code></pre>
<p>Kemudian me-listing isi dari directory saat ini:</p>
<pre class="language-apacheconf line-numbers"><code># melisting files dan sub-directory di directory saat ini
print("list directory: ", os.listdir('.'))</code></pre>
<p>Kemudian me-rename file secara bolak balik (di setiap kali script ini dijalankan):</p>
<pre class="language-apacheconf line-numbers"><code># me-rename file
if os.path.isfile("sample.txt") :
    os.rename("sample.txt","renamed.txt")
elif os.path.isfile("renamed.txt") :
    os.rename("renamed.txt","sample.txt")</code></pre>
<h2>Penutup</h2>
<p>Sekarang Anda telah diperkenalkan dengan modul os.</p>
<p>Masih banyak method dari modul os yang belum dibahas.</p>
<p>Cek dokumentasinya, kemudian coba sendiri.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Menggunakan Modul urllib</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-menggunakan-modul-urllib.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-menggunakan-modul-urllib.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:45+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Di Python 3, untuk menangani URL diperlukan sebuah modul. Modul itu adalah urllib. Selain untuk menangani URL, urllib juga bisa digunakan untuk membuat request. Dengan kata lain kita bisa mendownload content dari suatu URL untuk diterima oleh aplikasi yang mengirimkan request-nya. Di tutorial ini,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Di Python 3, untuk menangani URL diperlukan sebuah modul.</p>
<p>Modul itu adalah urllib.</p>
<p>Selain untuk menangani URL, urllib juga bisa digunakan untuk membuat request.</p>
<p>Dengan kata lain kita bisa mendownload content dari suatu URL untuk diterima oleh aplikasi yang mengirimkan request-nya.</p>
<p>Di tutorial ini, kita akan menggunakan urllib untuk melakukan request ke:</p>
<p><a href="https://quotes.toscrape.com/" target="_blank" rel="noreferrer noopener nofollow">https://quotes.toscrape.com</a></p>
<p>Kemudian mem-print response-nya.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mampu melakukan request dengan urllib.</li>
<li>Pembaca mampu mem-print response dari request tersebut.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
<li>Telah memahami dan bisa mempraktekkan <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">pembuatan project Python 3</a>.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama untuk membuat project ini adalah dengan membuat project baru bernama "project_python3_urllib".</p>
<p>Anda bisa menggunakan project yang dibuat di <a href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html">tutorial ini</a>.</p>
<p>Sekarang, seharusnya di folder project sudah ada file main.py.</p>
<p>Replace isinya sedemikan rupa sehingga menjadi seperti ini:</p>
<pre class="language-python line-numbers"><code># file: contoh_modul_urllib.py

# begin: import modules
import urllib.request
# end: import modules

# memprint teks: "mulai contoh 1"
print("mulai contoh 1")

# membuka halaman homepage dari https://quotes.toscrape.com
html = urllib.request.urlopen('https://quotes.toscrape.com').read()
# memprint outputnya.
print(html)

# memprint teks: "mulai contoh 2"
print("mulai contoh 2")

# begin: memberi nilai pada http header, dalam hal ini user agent nya
headers = {}
# nilai user agent browser saya. bisa dicari di google
headers['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.79 Safari/537.36"
# end: memberi nilai pada http header, dalam hal ini user agent nya

# membuka halaman homepage dari https://quotes.toscrape.com
# kali ini disertai header
req = urllib.request.Request('https://quotes.toscrape.com', headers = headers)
html = urllib.request.urlopen(req).read()
# memprint outputnya.
print(html)</code></pre>
<p>Sekarang, aktifkan virtual environment, kemudian jalankan:</p>
<pre>python main.py</pre>
<p>Nanti, outputnya akan berupa HTML dari situs quotes tadi ( <a href="https://quotes.toscrape.com/" target="_blank" rel="noreferrer noopener nofollow">https://quotes.toscrape.com</a> ).</p>
<h2>Pembahasan</h2>
<p>urllib adalah modul bawaan Python 3, sehingga tidak diperlukan pip install untuk menggunakannya.</p>
<p>Di bagian ini:</p>
<pre class="language-python line-numbers"><code># begin: import modules
import urllib.request
# end: import modules</code></pre>
<p>Kita meng-import modul urllib.request.</p>
<p>Kenapa?</p>
<p>Karena kita akan mengirimkan request ke target URL kita.</p>
<p>Jika istilah-istilah tadi masih asing, saya sarankan Anda belajar dulu tentang konsep HTTP di sumber lainnya.</p>
<p>Pada bagian ini:</p>
<pre class="language-python line-numbers"><code># membuka halaman homepage dari https://quotes.toscrape.com
html = urllib.request.urlopen('https://quotes.toscrape.com').read()
# memprint outputnya.
print(html)</code></pre>
<p>Kita membuka halaman denganURL berupa <a href="https://quotes.toscrape.com/">https://quotes.toscrape.com</a>Â .</p>
<p>Selanjutnya, responnya akan di-assign ke variabel html.</p>
<p>Selanjutnya, isi variabel html akan ditampilkan pada command line.</p>
<p>Adapun, pada bagian ini:</p>
<pre class="language-python line-numbers"><code># begin: memberi nilai pada http header, dalam hal ini user agent nya
headers = {}
# nilai user agent browser saya. bisa dicari di google
headers['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.79 Safari/537.36"
# end: memberi nilai pada http header, dalam hal ini user agent nya

# membuka halaman homepage dari https://quotes.toscrape.com
# kali ini disertai header
req = urllib.request.Request('https://quotes.toscrape.com', headers = headers)
html = urllib.request.urlopen(req).read()
# memprint outputnya.
print(html)</code></pre>
<p>Kita melakukan hal yang tidak berbeda jauh dengan yang sebelumnya.</p>
<p>Namun, ini adalah versi yang lebih kompleks.</p>
<p>Pada kode tadi, kita membuat variabel headers yang diisi User-Agent:</p>
<pre class="language-python line-numbers"><code># begin: memberi nilai pada http header, dalam hal ini user agent nya
headers = {}
# nilai user agent browser saya. bisa dicari di google
headers['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.79 Safari/537.36"
# end: memberi nilai pada http header, dalam hal ini user agent nya</code></pre>
<p>Karena disertai headers, maka pemanggilan method urlopen menjadi lebih kompleks dikarenakan juga oleh input parameter yang lebih banyak:</p>
<pre class="language-python line-numbers"><code># membuka halaman homepage dari https://quotes.toscrape.com
# kali ini disertai header
req = urllib.request.Request('https://quotes.toscrape.com', headers = headers)
html = urllib.request.urlopen(req).read()
# memprint outputnya.
print(html)</code></pre>
<p>Walaupun secara prinsip sama dengan yang sebelum ini.</p>
<p>Lihat kode ini:</p>
<pre class="language-python line-numbers"><code>req = urllib.request.Request('https://quotes.toscrape.com', headers = headers)</code></pre>
<p>Variabel req-nya dimasukkan ke parameter dari method urlopen:</p>
<pre class="language-python line-numbers"><code>html = urllib.request.urlopen(req).read()</code></pre>
<p>Kemudian hasil method read akan dimasukkan ke variabel html.</p>
<p>Kemudian variabel html di-print:</p>
<pre class="language-python line-numbers"><code># memprint outputnya.
print(html)</code></pre>
<p>Kira-kira seperti itu.</p>
<h2>Penutup</h2>
<p>Sekarang Anda telah dijelaskan tentang modul urllib.</p>
<p>Masih banyak method dari urllib yang tidak dibahas di sini.</p>
<p>Anda bisa mengecek dokumentasinya dan melakukan eksperimen sendiri.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Belajar Python 3 - Cara Membuat Project</title>
        <author>
            <name>RAKIFSUL</name>
        </author>
        <link href="https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html"/>
        <id>https://python.rakifsul.my.id/belajar-python-3-cara-membuat-project.html</id>
            <category term="Dasar"/>

        <updated>2023-12-06T22:24:57+07:00</updated>
            <summary>
                <![CDATA[
                    Pendahuluan Python 3 adalah bahasa pemrograman yang relatif mudah untuk dipelajari. Package untuk Python 3 saat ini sudah cukup banyak. Dukungan komunitasnya juga sudah banyak. Selain itu, Python 3 memiliki apa yang tidak dimiliki Electron. Yaitu wxPython. wxPython adalah framework untuk membuat native GUI yang&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Pendahuluan</h2>
<p>Python 3 adalah bahasa pemrograman yang relatif mudah untuk dipelajari.</p>
<p>Package untuk Python 3 saat ini sudah cukup banyak.</p>
<p>Dukungan komunitasnya juga sudah banyak.</p>
<p>Selain itu, Python 3 memiliki apa yang tidak dimiliki Electron.</p>
<p>Yaitu wxPython.</p>
<p>wxPython adalah framework untuk membuat native GUI yang dibuat berbasis wxWidgets.</p>
<p>Karena ringan, kecil, dan cepat, menggunakan wxPython untuk membuat aplikasi sederhana adalah sangat cocok, menurut saya.</p>
<p>Tentunya, Anda tidak ingin membuat aplikasi password generator sederhana dengan framework yang memakan ratusan MB bukan?</p>
<p>Selain itu, Python 3 memiliki package-package yang sangat membantu dalam computer vision dan artificial intelligence seperti OpenCV dan Tensorflow.</p>
<h2>Tujuan</h2>
<p>Tujuan dari tutorial ini adalah:</p>
<ul>
<li>Pembaca mampu membuat project Python 3.</li>
<li>Pembaca mampu membuat virtual environment dan menggunakannya.</li>
<li>Pembaca mampu mencoba menjalankan project Python 3 yang telah dibuat.</li>
<li>Pembaca mampu menjalankan kembali kode Python 3 yang telah dibuatnya.</li>
</ul>
<h2>Prasyarat</h2>
<p>Prasyarat dari tutorial ini adalah:</p>
<ul>
<li>Menggunakan sistem operasi Windows 10 ke atas.</li>
<li>Telah meng-install Python versi 3.10.0 dan dapat menjalankannya dari folder manapun.</li>
</ul>
<h2>Langkah-Langkah</h2>
<p>Langkah pertama dalam membuat project Python 3 adalah membuat folder project.</p>
<p>Buatlah folder baru bernama "project_python_1" di manapun dengan menggunakan Explorer atau PowerShell.</p>
<p>Masuklah ke dalam folder tersebut dengan PowerShell:</p>
<pre>cd project_python_1</pre>
<p>Di dalam folder tersebut, buatlah sebuah file script Python 3 bernama "main.py".</p>
<p>Buka file tersebut dengan text editor apapun, kemudian isi dengan kode ini:</p>
<pre class="language-python line-numbers"><code>print("Hello World")</code></pre>
<p>Sekarang, kita akan membuat virtual environment.</p>
<p>Caranya, buka PowerShell, kemudian jalankan:</p>
<pre>python -m venv venv</pre>
<p>Kemudian lanjutkan dengan:</p>
<pre>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</pre>
<p>Selanjutnya, aktifkan virtual environment dengan cara:</p>
<pre>venv/Scripts/activate</pre>
<p>Setelah itu dilakukan, sekarang Anda bisa menginstall package Python dengan leluasa tanpa khawatir akan mengganggu instalasi utamanya.</p>
<p>Sebagai contoh, di sini Anda bisa jalankan:</p>
<pre>pip install -r requirements.txt</pre>
<p>Dengan tenang jika requirements.txt ada.</p>
<p>Selanjutnya, Anda bisa jalankan:</p>
<pre>python main.py</pre>
<p>Nanti akan muncul output:</p>
<pre>Hello World</pre>
<p>Selesai.</p>
<h2>Pembahasan</h2>
<h3>1. Tentang Virtual Environment</h3>
<p>Setelah Anda mencoba langkah-langkah tadi, mungkin Anda ingin tahu kenapa dan apa itu virtual environment.</p>
<p>Setahu saya, virtual environment adalah sebuah cara pada Python 3 agar project tadi terisolasi dari instalasi Python 3 yang utama.</p>
<p>Jadi jika Anda meng-install suatu package di project tersebut, ia hanya akan berlaku pada project itu saja dan tidak mempengaruhi yang lainnya.</p>
<h3>2. Membuat Virtual Environment</h3>
<p>Adapun:</p>
<pre>python -m venv venv</pre>
<p>Perintah tadi akan membuat folder bernama "venv" berdasarkan parameter yang terkanan.</p>
<p>-m venv itu adalah parameter untuk membuat virtual environment.</p>
<p>Jadi, jika saya bilang:</p>
<pre>python -m venv kelinci</pre>
<p>Maka Python 3 akan membuat virtual environment yang bahannya ada di dalam folder "kelinci".</p>
<h3>3. Memahami Set-ExecutionPolicy</h3>
<p>Sekarang:</p>
<pre>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</pre>
<p>Perintah tadi digunakan karena terkadang virtual environment tidak bisa diaktifkan dengan PowerShell.</p>
<p>Seringkali saya gagal mengaktifkan virtual environment dengan perintah ini:</p>
<pre>venv/Scripts/activate</pre>
<p>Jika tidak menjalankan Set-ExecutionPolicy... tadi.</p>
<h3>4. Print</h3>
<p>Sekarang kita bahas kode ini:</p>
<pre class="language-python line-numbers"><code>print("Hello World")</code></pre>
<p>Kode tersebut akan menampilkan teks "Hello World" di console.</p>
<p>Apakah hanya "Hello World"?</p>
<p>Tentu tidak, Anda bisa mengisinya dengan teks lain:</p>
<pre class="language-python line-numbers"><code>print("Hello Kelinci")</code></pre>
<h2>Penutup</h2>
<p>Sekarang, Anda sudah dijelaskan tentang pembuatan project Python 3 hingga virtual environment-nya.</p>
<p>Selain itu, Anda juga sudah diajarkan untuk mem-print teks di console.</p>
<p>Sekarang, saatnya Anda mencoba meng-install package ke dalam virtual environment yang telah Anda buat.</p>
<p>Untuk meng-install package itu sendiri caranya mudah.</p>
<p>Yakni dengan menjalankan perintah:</p>
<pre>pip install [nama-package]</pre>
<p>Tentunya setelah virtual environment di project Python 3 Anda sudah diaktifkan, agar tidak mengganggu instalasi Python 3 utama Anda.</p>
<p>Selamat mencoba.</p>
            ]]>
        </content>
    </entry>
</feed>
